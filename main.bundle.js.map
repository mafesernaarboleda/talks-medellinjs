{"version":3,"sources":["webpack:///./src/app/shared/services/talk.service.ts","webpack:///./src/app/shared/services/speaker.service.ts","webpack:///./src/app/talk-register/talk-register.component.ts","webpack:///./src/app/talk-table/talk-table.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/talk-register/talk-register.component.css","webpack:///./src/app/talk-table/talk-table.component.css","webpack:///./src/app/talk-register/talk-register.component.html","webpack:///./src/app/talk-table/talk-table.component.html"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\n@Injectable()\nexport class TalkService {\n\n  constructor(private http: Http) {\n\n  }\n\n  getTalks(): Observable<any> {\n    return this.http.get('https://safe-savannah-59407.herokuapp.com/talks')\n      .map( (res: Response) => {\n        console.log('getTalks', res.json());\n        return res.json();\n      })\n      .catch(this.handleError);\n  }\n\n  saveTalk(data: any): Observable<any> {\n    return this.http.post('https://safe-savannah-59407.herokuapp.com/talks', data)\n      .map( (res: Response) => {\n        console.log('saveTalk', res.json());\n        return res.json();\n      })\n      .catch(this.handleError);\n  }\n\n  private handleError(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.log('handleError', errMsg);\n    return Observable.throw(errMsg);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/services/talk.service.ts","import { Injectable } from '@angular/core';\nimport { Http, Response, RequestOptionsArgs, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\n@Injectable()\nexport class SpeakerService {\n\n  constructor(private http: Http) {\n\n  }\n\n  // saveSpeaker(): Observable<any> {\n  //   // const headers = new Headers()\n  //   const options = '';\n  //   return this.http.post('http://localhost:8081/talks', options)\n  //     .map( (res: Response) => {\n  //       console.log(res.json());\n  //       return res.json();\n  //     })\n  //     .catch(this.handleError);\n  // }\n\n  saveSpeaker(data: any): Observable<any> {\n    return this.http.post('https://safe-savannah-59407.herokuapp.com/speakers', data)\n      .map( (res: Response) => {\n        console.log('saveSpeakers', res.json());\n        return res.json();\n      })\n      .catch(this.handleError);\n  }\n\n  private handleError(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.log('handleError', errMsg);\n    return Observable.throw(errMsg);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/services/speaker.service.ts","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn, FormArray } from '@angular/forms';\nimport { SpeakerService } from '../shared/services/speaker.service';\nimport { TalkService } from '../shared/services/talk.service';\nimport { ITalk } from '../shared/talk';\n\nimport 'rxjs/add/operator/debounceTime';\n\nfunction emailMatcher(c: AbstractControl): { [key: string]: boolean } | null {\n  const emailControl = c.get('email');\n  const confirmControl = c.get('confirmEmail');\n\n  if (emailControl.pristine || confirmControl.pristine) {\n    return null;\n  }\n\n  if (emailControl.value === confirmControl.value) {\n    return null;\n  }\n  return { 'match': true };\n}\n\nfunction ratingRange(min: number, max: number): ValidatorFn {\n  return (c: AbstractControl): { [key: string]: boolean } | null => {\n    if (c.value !== undefined && (isNaN(c.value) || c.value < min || c.value > max)) {\n      return { 'range': true };\n    };\n    return null;\n  };\n}\n\n@Component({\n  selector: 'app-talk-register-component',\n  templateUrl: './talk-register.component.html',\n  styleUrls: ['./talk-register.component.css']\n})\nexport class TalkRegisterComponent implements OnInit {\n\n  talkForm: FormGroup;\n  emailMessage: string;\n  errorMessage: string;\n  talk: ITalk[];\n  filteredTals: ITalk[];\n\n  get addresses(): FormArray {\n    return <FormArray>this.talkForm.get('addresses');\n  }\n\n  private validationMessages = {\n    required: 'Please enter your email address.',\n    pattern: 'Please enter a valid email address.'\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private talkService: TalkService,\n    private speakerService: SpeakerService\n  ) { }\n\n  ngOnInit(): void {\n    this.talkForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.minLength(3)]],\n      lastName: ['', [Validators.required, Validators.maxLength(50)]],\n      emailGroup: this.fb.group({\n        email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+')]],\n        confirmEmail: ['', Validators.required],\n      }, { validator: emailMatcher }),\n      twitterId: ['', [Validators.required]],\n      titleTalk: ['', [Validators.required, Validators.minLength(3)]],\n      duration: ['', [Validators.required]],\n      shirtSize: ['', [Validators.required]],\n      talkDescription: ['', [Validators.required, Validators.minLength(3)]],\n      speakerDescription: ['', [Validators.required, Validators.minLength(3)]],\n      necessaryResources: ['', [Validators.required]]\n    });\n\n    const emailControl = this.talkForm.get('emailGroup.email');\n    emailControl.valueChanges.debounceTime(1000).subscribe(value =>\n      this.setMessage(emailControl));\n  }\n\n  populateTestData(): void {\n    this.talkForm.patchValue({\n      firstName: 'Jack',\n      lastName: 'white',\n      titleTalk: 'Title Talk',\n      twitterId: '@Harkness',\n      emailGroup: { email: 'jack@torchwood.com', confirmEmail: 'jack@torchwood.com' },\n      duration: '1',\n      shirtSize: 'S',\n      talkDescription: 'Description of',\n      speakerDescription: 'Developer',\n      necessaryResources: 'IMac!!!',\n    });\n  }\n\n  save(): void {\n    console.log('Saved: ' + JSON.stringify(this.talkForm.value));\n    this.saveSpeakers(this.talkForm.value);\n  }\n\n  saveSpeakers(data) {\n    this.speakerService.saveSpeaker(this.jsonSpeaker(this.talkForm.value))\n      .subscribe((result) => this.saveTalks(result._id), error => this.errorMessage = <any>error);\n  }\n\n  saveTalks(id: any) {\n    this.talkService.saveTalk(this.jsonTalk(this.talkForm.value, id)).subscribe(\n      () => { }, error => this.errorMessage = <any>error);\n  }\n\n\n\n  setMessage(c: AbstractControl): void {\n    this.emailMessage = '';\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailMessage = Object.keys(c.errors).map(key =>\n        this.validationMessages[key]).join(' ');\n    }\n  }\n\n  jsonSpeaker(data) {\n    return {\n      'name': `${data.firstName} ${data.lastName}`,\n      'email': data.emailGroup.email,\n      'twitterUser': data.twitterId,\n      'description': data.speakerDescription,\n      'size': data.shirtSize,\n    };\n  }\n\n  jsonTalk(data, id) {\n    return {\n      'speakers': [{ '_id': id }],\n      'title': data.titleTalk,\n      'duration': data.duration,\n      'description': data.talkDescription,\n      'sources': data.necessaryResources\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/talk-register/talk-register.component.ts","import { Component, OnInit } from '@angular/core';\nimport { TalkService } from '../shared/services/talk.service';\nimport { ITalk } from '../shared/talk';\n\n@Component({\n  selector: 'app-talk-table',\n  templateUrl: './talk-table.component.html',\n  styleUrls: ['./talk-table.component.css']\n})\nexport class TalkTableComponent implements OnInit {\n  talk: ITalk[];\n  filteredTals: ITalk[];\n  errorMessage: string;\n  pageTitle = 'List Of Talks';\n\n  _listFilter: string;\n  get listFilter(): string {\n    return this._listFilter;\n  }\n  set listFilter(value: string) {\n    this._listFilter = value;\n    this.filteredTals = this.listFilter ? this.performFilter(this.listFilter) : this.talk;\n  }\n\n  constructor(\n    private talkService: TalkService\n  ) { }\n\n  performFilter(filterBy: string): ITalk[] {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.talk.filter((talk: ITalk) =>\n      talk.firstName.toLocaleLowerCase().indexOf(filterBy) !== -1);\n  }\n\n  ngOnInit() {\n    this.getListOfTalks();\n  }\n\n  getListOfTalks() {\n    this.talkService.getTalks()\n      .subscribe(\n      talk => this.talk = talk.map(this.matchResultToFront.bind(this)),\n      error => this.errorMessage = <any>error);\n  }\n\n  matchResultToFront(result) {\n    return {\n      firstName: result.speakers[0].name,\n      lastName: result.speakers[0].name,\n      email: result.speakers[0].email,\n      twitterUser: result.speakers[0].twitterUser,\n      titleTalk: result.title,\n      duration: result.duration,\n      shirtSize: result.size,\n      talkDescription: result.description,\n      speakerDescription: result.speakers[0].description,\n      necessaryResources: result.sources,\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/talk-table/talk-table.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 342;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 342\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TalkRegisterComponent } from './talk-register/talk-register.component';\nimport { TalkTableComponent } from './talk-table/talk-table.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  { path: 'home', component: TalkRegisterComponent },\n  { path: 'table', component: TalkTableComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [\n    RouterModule\n  ],\n})\nexport class AppRoutingModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routing.module.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { TalkRegisterComponent } from './talk-register/talk-register.component';\nimport { TalkTableComponent } from './talk-table/talk-table.component';\n\nimport { TalkService } from './shared/services/talk.service';\nimport { SpeakerService } from './shared/services//speaker.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TalkRegisterComponent,\n    TalkTableComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpModule\n  ],\n  providers: [\n    TalkService,\n    SpeakerService\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 517\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/talk-register/talk-register.component.css\n// module id = 518\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/talk-table/talk-table.component.css\n// module id = 519\n// module chunks = 1","module.exports = \"<div class=\\\"panel panel-primary\\\">\\n\\n  <div class=\\\"panel-body\\\">\\n    <form class=\\\"form-horizontal\\\" novalidate (ngSubmit)=\\\"save()\\\" [formGroup]=\\\"talkForm\\\">\\n      <fieldset>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('firstName').touched ||\\n                                            talkForm.get('firstName').dirty) &&\\n                                            !talkForm.get('firstName').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"firstNameId\\\">First Name</label>\\n          <div class=\\\"col-md-8\\\">\\n            <input class=\\\"form-control\\\" id=\\\"firstNameId\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\"/>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('firstName').touched ||\\n                                                       talkForm.get('firstName').dirty) &&\\n                                                       talkForm.get('firstName').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('firstName').errors.required\\\">Please enter your first name.</span>\\n              <span *ngIf=\\\"talkForm.get('firstName').errors.minlength\\\">The first name must be longer than 3 characters.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('lastName').touched || talkForm.get('lastName').dirty) && !talkForm.get('lastName').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"lastNameId\\\">Last Name</label>\\n          <div class=\\\"col-md-8\\\">\\n            <input class=\\\"form-control\\\" id=\\\"lastNameId\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" />\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('lastName').touched || talkForm.get('lastName').dirty) && talkForm.get('lastName').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('lastName').errors.required\\\">Please enter your last name.</span>\\n              <span *ngIf=\\\"talkForm.controls.lastName.errors.maxlength\\\">The last name must be less than 50 characters.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div formGroupName=\\\"emailGroup\\\" [ngClass]=\\\"{'has-error': talkForm.get('emailGroup').errors }\\\">\\n          <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': emailMessage}\\\">\\n            <label class=\\\"col-md-3 control-label\\\" for=\\\"emailId\\\">Email</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input class=\\\"form-control\\\" id=\\\"emailId\\\" type=\\\"email\\\" formControlName=\\\"email\\\" />\\n              <span class=\\\"help-block\\\" *ngIf=\\\"emailMessage\\\">{{ emailMessage }}</span>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('emailGroup.confirmEmail').touched ||\\n                                                talkForm.get('emailGroup.confirmEmail').dirty) &&\\n                                                !talkForm.get('emailGroup.confirmEmail').valid }\\\">\\n            <label class=\\\"col-md-2 control-label\\\" for=\\\"confirmEmailId\\\">Confirm Email</label>\\n            <div class=\\\"col-md-8\\\">\\n              <input class=\\\"form-control\\\" id=\\\"confirmEmailId\\\" type=\\\"email\\\" formControlName=\\\"confirmEmail\\\"/>\\n              <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('emailGroup.confirmEmail').touched ||\\n                                                          talkForm.get('emailGroup.confirmEmail').dirty) &&\\n                                                          (talkForm.get('emailGroup.confirmEmail').errors ||\\n                                                           talkForm.get('emailGroup').errors)\\\">\\n                <span *ngIf=\\\"talkForm.get('emailGroup.confirmEmail').errors?.required\\\">Please confirm your email address.</span>\\n                <span *ngIf=\\\"talkForm.get('emailGroup').errors?.match\\\">The confirmation does not match the email address.</span>\\n              </span>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': !talkForm.get('twitterId').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"twitterId\\\">Twitter user</label>\\n          <div class=\\\"col-md-8\\\">\\n            <input class=\\\"form-control\\\" id=\\\"twitterId\\\" type=\\\"tel\\\" formControlName=\\\"twitterId\\\" />\\n            <span class=\\\"help-block\\\" *ngIf=\\\"talkForm.get('twitterId').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('twitterId').errors.required\\\">Please enter your twiter User.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('titleTalk').touched ||\\n                                              talkForm.get('titleTalk').dirty) &&\\n                                              !talkForm.get('titleTalk').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"titleTalkId\\\">Title of the talk</label>\\n          <div class=\\\"col-md-8\\\">\\n            <input class=\\\"form-control\\\" id=\\\"titleTalkId\\\" type=\\\"text\\\" formControlName=\\\"titleTalk\\\"/>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('titleTalk').touched ||\\n                                                talkForm.get('titleTalk').dirty) &&\\n                                                talkForm.get('titleTalk').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('titleTalk').errors.required\\\">Please enter the title of the talk.</span>\\n              <span *ngIf=\\\"talkForm.get('titleTalk').errors.minlength\\\">The title of the talk must be longer than 3 characters.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('duration').touched ||\\n                                                talkForm.get('duration').dirty) &&\\n                                                !talkForm.get('duration').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"durationId\\\">Approximate duration</label>\\n          <div class=\\\"col-md-8\\\">\\n            <input class=\\\"form-control\\\" id=\\\"durationId\\\" type=\\\"text\\\" formControlName=\\\"duration\\\"/>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('duration').touched ||\\n                                                talkForm.get('duration').dirty) &&\\n                                                talkForm.get('duration').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('duration').errors.required\\\">Please enter a approximate duration.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"col-md-3 control-label\\\" attr.for=\\\"{{'cityId' + i}}\\\">Shirt size</label>\\n          <div class=\\\"col-md-8\\\">\\n            <select class=\\\"form-control\\\" id=\\\"{{'shirtSizeId' + i}}\\\" formControlName=\\\"shirtSize\\\">\\n                <option value=\\\"S\\\">S</option>\\n                <option value=\\\"M\\\">M</option>\\n                <option value=\\\"L\\\">L</option>\\n                <option value=\\\"XL\\\">XL</option>\\n                <option value=\\\"XL\\\">XXL</option>\\n            </select>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('shirtSize').touched ||\\n                                                  talkForm.get('shirtSize').dirty) &&\\n                                                  talkForm.get('shirtSize').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('shirtSize').errors?.required\\\">Please confirm your shirt size.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('talkDescription').touched ||\\n                                                  talkForm.get('talkDescription').dirty) &&\\n                                                  !talkForm.get('talkDescription').valid }\\\">\\n          <label class=\\\"col-md-12 control-label\\\" for=\\\"talkDescriptionId\\\">Small description of the talk</label>\\n          <div class=\\\"col-md-8\\\">\\n            <textarea class=\\\"form-control\\\" id=\\\"talkDescriptionId\\\" type=\\\"text\\\" formControlName=\\\"talkDescription\\\"></textarea>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('talkDescription').touched ||\\n                                                  talkForm.get('talkDescription').dirty) &&\\n                                                  talkForm.get('talkDescription').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('talkDescription').errors.required\\\">Please enter a small description of the talk.</span>\\n              <span *ngIf=\\\"talkForm.get('talkDescription').errors.minlength\\\">The description must be longer than 3 characters.</span>\\n            </span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('speakerDescription').touched ||\\n                                                  talkForm.get('speakerDescription').dirty) &&\\n                                                  !talkForm.get('speakerDescription').valid }\\\">\\n          <label class=\\\"col-md-12 control-label\\\" for=\\\"speakerDescriptionId\\\">Small description about you (career, occupation, etc.)</label>\\n          <div class=\\\"col-md-8\\\">\\n            <textarea class=\\\"form-control\\\" id=\\\"speakerDescriptionId\\\" type=\\\"text\\\" formControlName=\\\"speakerDescription\\\"></textarea>\\n            <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('speakerDescription').touched ||\\n                                                  talkForm.get('speakerDescription').dirty) &&\\n                                                  talkForm.get('speakerDescription').errors\\\">\\n              <span *ngIf=\\\"talkForm.get('speakerDescription').errors.required\\\">Please enter a small description about you.</span>\\n              <span *ngIf=\\\"talkForm.get('speakerDescription').errors.minlength\\\">The description must be longer than 3 characters.</span>\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': (talkForm.get('necessaryResources').touched ||\\n                                                talkForm.get('necessaryResources').dirty) &&\\n                                                !talkForm.get('necessaryResources').valid }\\\">\\n          <label class=\\\"col-md-2 control-label\\\" for=\\\"necessaryResourcesId\\\">Necessary resources</label>\\n          <div class=\\\"col-md-8\\\">\\n          <textarea class=\\\"form-control\\\" id=\\\"necessaryResourcesId\\\" type=\\\"text\\\" formControlName=\\\"necessaryResources\\\"></textarea>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"(talkForm.get('necessaryResources').touched ||\\n                                                talkForm.get('necessaryResources').dirty) &&\\n                                                talkForm.get('necessaryResources').errors\\\">\\n          </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-md-4 col-md-offset-2\\\">\\n              <span>\\n                  <button class=\\\"btn btn-primary\\\"\\n                          type=\\\"submit\\\"\\n                          [disabled]=\\\"!talkForm.valid\\\">\\n                      Save\\n                  </button>\\n              </span>\\n              <span>\\n                  <button class=\\\"btn btn-default\\\"\\n                          type=\\\"button\\\"\\n                          (click)=\\\"populateTestData()\\\">\\n                      Test Data\\n                  </button>\\n              </span>\\n          </div>\\n        </div>\\n      </fieldset>\\n    </form>\\n</div>\\n<br>Dirty: {{ talkForm.dirty }}\\n<br>Touched: {{ talkForm.touched }}\\n<br>Valid: {{ talkForm.valid }}\\n<br>Value: {{ talkForm.value | json }}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/talk-register/talk-register.component.html\n// module id = 521\n// module chunks = 1","module.exports = \"<div class='panel panel-primary'>\\n  <div class='panel-heading'>\\n    {{pageTitle | uppercase}}\\n  </div>\\n  <div class='panel-body'>\\n    <div class='table-responsive'>\\n      <table class='table'>\\n        <thead>\\n          <tr>\\n            <th>Name</th>\\n            <th>Email</th>\\n            <th>Twitter User</th>\\n            <th>Title Talk</th>\\n            <th>Duration</th>\\n            <th>Shirt Size</th>\\n            <th>Talk Description</th>\\n            <th>Speaker Description</th>\\n            <th>Necessary Resources</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor='let item of talk'>\\n            <td>{{ item.firstName }}</td>\\n            <td>{{ item.email }}</td>\\n            <td>{{ item.twitterUser }}</td>\\n            <td>{{ item.titleTalk }}</td>\\n            <td>{{ item.duration }}</td>\\n            <td>{{ item.shirtSize }}</td>\\n            <td>{{ item.talkDescription }}</td>\\n            <td>{{ item.speakerDescription }}</td>\\n            <td>{{ item.necessaryResources }}</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n</div>\\n<div *ngIf='errorMessage' class='alert alert-danger'>\\n  Error: {{ errorMessage }}\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/talk-table/talk-table.component.html\n// module id = 522\n// module chunks = 1"],"sourceRoot":""}